!gcloud firestore indexes composite create  --collection-group=food-safety  --query-scope=COLLECTION  --field-config field-path=embedding,vector-config='{"dimension":"768","flat":"{}"}'  --project = "qwiklabs-gcp-04-fecf0ae875ae"

 

 

 

 

 

 

!gcloud firestore indexes composite create  --collection-group=food-safety  --query-scope=COLLECTION  --field-config field-path=embedding,vector-config='{"dimension":"768","flat":"{}"}'

 

 

 

 

 

!gcloud config set project qwiklabs-gcp-04-fecf0ae875ae

 

 

 

docker build -t us-central1-docker.pkg.dev/$PROJECT_ID/cymbal-artifact-repo/cymbal-image:latest -f Dockerfile.

 

docker push us-central1-docker.pkg.dev/$PROJECT_ID/cymbal-artifact-repo/cymbal-image:latest

 

 

 

 

 

 

!pip install --quiet --upgrade google_cloud_firestore google_cloud_aiplatform langchain langchain-google-vertexai langchain_community langchain_experimental pymupdf

 

 

 

import vertexai

from vertexai.language_models import TextEmbeddingModel

from vertexai.generative_models import GenerativeModel

 

import pickle

from IPython.display import display, Markdown

 

from langchain_google_vertexai import VertexAIEmbeddings

from langchain_community.document_loaders import PyMuPDFLoader

from langchain_experimental.text_splitter import SemanticChunker

 

from google.cloud import firestore

from google.cloud.firestore_v1.vector import Vector

from google.cloud.firestore_v1.base_vector_query import DistanceMeasure

 

 

 

 

PROJECT_ID = ! gcloud config get-value project

PROJECT_ID = PROJECT_ID[0]

LOCATION = "us-central1" # @param {type:"string"}

 

# define project information manually if the above code didn't work

if PROJECT_ID == "(unset)":

  PROJECT_ID = "qwiklabs-gcp-04-fecf0ae875ae" # @param {type:"string"}

 

print(PROJECT_ID)

 

vertexai.init(project=PROJECT_ID, location=LOCATION)

 

 

 

from langchain_google_vertexai import VertexAIEmbeddings

embedding_model = VertexAIEmbeddings(model_name="text-embedding-004")

 

 

!gcloud storage cp gs://partner-genai-bucket/genai069/nyc_food_safety_manual.pdf .

 

 

from langchain_community.document_loaders import PyMuPDFLoader

loader = PyMuPDFLoader("./nyc_food_safety_manual.pdf")

data = loader.load()

data[0]

 

 

def clean_page(page):

  return page.page_content.replace("-\n","")\

                          .replace("\n"," ")\

                          .replace("\x02","")\

                          .replace("\x03","")\

                          .replace("fo d P R O T E C T I O N  T R A I N I N G  M A N U A L","")\

                          .replace("N E W  Y O R K  C I T Y  D E P A R T M E N T  O F  H E A L T H  &  M E N T A L  H Y G I E N E","")

 

 

cleaned_pages = []

for pages in data:

  cleaned_pages.append(clean_page(pages))

 

 

 

text_splitter = SemanticChunker(embedding_model)

docs = text_splitter.create_documents(cleaned_pages[0:4])

chunked_content = [doc.page_content for doc in docs]

 

 

 

chunked_embeddings = embedding_model.embed_documents(chunked_content)

 

 

 

!gsutil cp gs://partner-genai-bucket/genai069/chunked_content.pkl .

!gsutil cp gs://partner-genai-bucket/genai069/chunked_embeddings.pkl .

 

chunked_content = pickle.load(open("chunked_content.pkl", "rb"))

chunked_embeddings = pickle.load(open("chunked_embeddings.pkl", "rb"))

 

 

 

db = firestore.Client(project=PROJECT_ID)

 

 

 

 

collection = db.collection('food-safety')

 

 

from google.cloud import firestore

from google.cloud.firestore_v1.vector import Vector

 

firestore_client = firestore.Client()

collection = firestore_client.collection("food-safety")

doc = {

    "name": "food-safety",

    "description": "Information about the food-safety.",

    "embedding_field": Vector([1.0, 2.0, 3.0]),

}

 

collection.add(doc)

 

 

for i,(content, embedding) in enumerate(zip(chunked_content, chunked_embeddings)):

  doc_ref = collection.document(f"doc_{i}")

  doc_ref.set({

      "content": content,

      "embedding": Vector(embedding)

  })

 

 

 

 

!gcloud config set project qwiklabs-gcp-04-fecf0ae875ae

 

 

!gcloud firestore indexes composite create  --collection-group=food-safety  --query-scope=COLLECTION  --field-config field-path=embedding,vector-config='{"dimension":"768","flat":"{}"}'

 

 

 

def search_vector_database(query: str):

  context=""

  query_embedding = embedding_model.embed_query(query)

  vector_query = collection.find_nearest(

      vector_field ="embedding",

      query_vector=Vector(query_embedding),

      distance_measure=DistanceMeasure.EUCLIDEAN,

      limit=5,

  )

  docs = vector_query.stream()

  context = [result.to_dict()['content']for result in docs]

  return context

 

 

 

search_vector_database("How should I store food?")

 
